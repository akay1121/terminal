syntax = "proto3";

package terminal.v1;

import "google/api/annotations.proto";
// We can tell the generator the field behaviors so that some fields would not appear
// when regarded as input / output only fields
import "google/api/field_behavior.proto";
// Customize the method signature by importing the proto file
import "google/api/client.proto";
// We can import this protobuf file to use the timestamp data type in our code
import "google/protobuf/timestamp.proto";
// Import the file to return an empty message
import "google/protobuf/empty.proto";
// To generate the final product OpenAPI specification file, we shall import the annotations to tell the generator
// to fill the corresponding fields so as to tell the developer how to use the APIs in a proper way.
import "openapi/v3/annotations.proto";
// To employ the validator like what the Spring framework does, we shall import the validate file provided by Envoy
import "validate/validate.proto";
// Any other protocol buffers definition files should also be imported explicitly
import "terminal/v1/error_reason.proto";

option go_package = "terminal/api/terminal/v1;v1";
option java_multiple_files = true; // Separate .java files will be generated for each of the Java classes/enums/etc.
option java_package = "terminal.v1"; // The package which the generated code will be placed in
option objc_class_prefix = "APITerminalV1"; // Objective-C class prefix


option (openapi.v3.document) = {
  info: {
    title: "Terminal Management Service"
    description: "A basic Terminal management service for test"
    version: "1.0.0"
  }
};

service TerminalManagement{
  rpc UpdateTerminalStatus(TerminalId) returns (google.protobuf.Empty) {

    option (google.api.http) = {
      put: "/terminal/{id}"
      body: "*"
    };

    option (google.api.method_signature) = "id";
    option (openapi.v3.operation) = {
      summary: "Update a terminal's status"
      description:
          "The service would first try to find if there exists a specific terminal by its id,"
              "and if found, user's information is then updated."
    };
  }
  rpc GetTerminalStatus(TerminalId) returns (TerminalStatus) {
    option (google.api.http) = {
      get: "/terminalStatus/{id}"
    };
    option (google.api.method_signature) = "id";
    option (openapi.v3.operation) = {
      summary: "Get a terminalStatus by its id"
      description:
          "User a terminal id to get the terminal's status and exceeding time"
    };
  }
  rpc GetTerminal(TerminalId) returns (Terminal) {
    option (google.api.http) = {
      get: "/terminal/{id}"
    };
    option (google.api.method_signature) = "id";
    option (openapi.v3.operation) = {
      summary: "Get a terminal information by its id"
      description:
          "User a terminal id to get the terminal's information"
    };
  }
  rpc AddTerminal(TerminalId) returns (google.protobuf.Empty) {

    option (google.api.http) = {
      post: "/terminal/{id}"
      body: "*"
    };

    option (google.api.method_signature) = "id";
    option (openapi.v3.operation) = {
      summary: "Add a terminal"
      description:
          "The service would first try to find if there exists a specific terminal by its id,"
              "and if not exist, add a terminal."
    };
  }
  rpc DeleteTerminal(TerminalId) returns (google.protobuf.Empty) {

    option (google.api.http) = {
      delete: "/terminal/{id}"
      body: "*"
    };

    option (google.api.method_signature) = "id";
    option (openapi.v3.operation) = {
      summary: "Delet a terminal"
      description:
          "The service would first try to find if there exists a specific terminal by its id,"
              "and if  exist, delete a terminal."
    };
  }
}




message Terminal{



  string id = 1 [
    (google.api.field_behavior) =REQUIRED,
    (openapi.v3.property).description = "Unique identifier for the user"
  ];
  int32 timeout = 2 [

    (openapi.v3.property).description = "the value of timeout"
  ];
  string status = 3 [

    (openapi.v3.property).description = "terminal's status online or offline"
  ];
  string proj_id = 4 [(openapi.v3.property).description ="The identifier of the project to which the terminal belongs"] ;
  string desc = 5[(openapi.v3.property).description ="An optional description of the terminal"];

  bool deleted = 6[(openapi.v3.property).description ="Whether it has been deleted"];
  google.protobuf.Timestamp create_time = 7[(openapi.v3.property).description ="create_ime"];
  google.protobuf.Timestamp last_update = 8[(openapi.v3.property).description ="newest update time"];
  message sensorInformation{
    string protocol = 1[(openapi.v3.property).description ="Protocol type for reporting sensor data"];
    string data_source = 2[(openapi.v3.property).description ="Data source address"];
    string location = 3[(openapi.v3.property).description ="Geographical location description"];
    enum coordinate  {
      longitude=0;
      latitude=1;
    }
  };
}

message TerminalStatus{
  string status = 1 [

    (openapi.v3.property).description = "terminal's status online or offline"
  ];
  int32 timeout = 2 [

    (openapi.v3.property).description = "the value of timeout"
  ];
  google.protobuf.Timestamp lastUpdated = 3[

    (openapi.v3.property).description = "last updated time"
  ];
  string id = 4[
    (openapi.v3.property).description = "Unique identifier for each Terminal"]
  ;

}
message TerminalId {
  option (openapi.v3.schema).description = "TerminalId is a global unique identifier for each terminal";
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (openapi.v3.property).description = "Unique identifier for each Terminal"
  ];
}